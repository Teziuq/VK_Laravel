Перед началом работы:
    Установить XAMPP (для бд(phpMyAdmin) и php)

----------Что есть сейчас:-------------

были прописанны команды:
- php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
- composer create-project --prefer-dist laravel/laravel vk-bot
- npm install vite
- php artisan migrate                           (для миграции с базой данных phpMyAdmin, типо обновление и тд)
- php artisan make:model PublicModel -m
- php artisan make:model ContestModel -m
- php artisan migrate
- php artisan make:controller PublicController  (для управления данными Public)
- php artisan make:controller ContestController (для управления данными Contest)
- composer require laravel/sanctum              (Laravel Sanctum вместо Passport. Sanctum является более легким альтернативным инструментом для аутентификации в Laravel )

Так же созданы

resources / views / auth / login.blade.php

                  / contest / create.blade.php
                            / index.blade.php

                  / layouts / app.blade.php

                  / publics / create.blade.php
                            / edit.blade.php
                            / index.blade.php

                  / dashboard.blade.php

------Чтобы запускать этат шайтан машина, нам нужна каманда:-------

php artisan serve


Была создана база данных phpMyAdmin ; Сервер: 127.0.0.1

Что нужно сделать?

На php laravel бот вк
Разработать приложение на php laravel После авторизации страница добавления пабликов и список токенов от паблика.
Кнопка создать конкурс, выбираю паблики, выбираю приз. Приз это анимированный, голд пак в вк либо голоса.
Алгоритм такой. Я создаю конкурс, текст, картинку, далее выбираю приз. Задания однотипное это лайк и проверка подписки. После создания конкурса он автоматически публикуется в выбранных пабликах. Затем когда приходит время розыгрыша скрипт публикует пост с итогом и автоматически отправлят приз. 

По дизайну тут так:
С начала страница авторизации: login and password, После нас встречает страница с 2 вкладками: База пабликов (тут только таблица (ID, VK ID, Название, Token, Действия(edit/delite)) и кнопка добавить паблик) и вкладка Конкурсы (Таблица(ID, Картинка, Текст, Время розыгрыша, id пабликов и действия) и кнопка Создать конкурс)

По идее главно чтобы работал бекенд




Этап 1: Разработка бекенда
1.1 Создание моделей и миграций
Создайте модели для пользователя, паблика, конкурса, приза и задания.
Сделайте миграции для каждой модели для создания соответствующих таблиц в базе данных.
1.2 Работа с контроллерами
В PublicController и ContestController реализуйте методы для управления данными (добавление, редактирование, удаление).
Взаимодействуйте с моделями и базой данных в этих методах.
1.3 Интеграция с VK API
Создайте функции для взаимодействия с VK API в вашем проекте, например, в отдельном классе или сервисе.
Используйте VK API для получения токенов пабликов и для публикации постов о конкурсах.
Этап 2: Разработка авторизации
2.1 Установка Laravel Passport
Установите Laravel Passport с помощью composer require laravel/passport.
Запустите миграции для создания таблиц в базе данных: php artisan migrate.
Создайте токен для пользователя и используйте его для аутентификации.
Этап 3: Управление пабликами
3.1 Создание страницы управления пабликами
Создайте маршруты, контроллер и представления для управления пабликами.
На странице отобразите таблицу с пабликами и кнопку "Добавить паблик".
3.2 Реализация функционала добавления пабликов
В PublicController создайте методы для добавления, редактирования и удаления пабликов.
Интегрируйте VK API для получения токенов при добавлении пабликов.
Этап 4: Управление конкурсами
4.1 Создание страницы управления конкурсами
Создайте маршруты, контроллер и представления для управления конкурсами.
На странице отобразите таблицу с конкурсами и кнопку "Создать конкурс".
4.2 Интеграция с VK API для публикации конкурсов
В ContestController создайте методы для добавления, редактирования и удаления конкурсов.
Используйте VK API для публикации конкурсов в выбранных пабликах.
4.3 Реализация выбора приза и заданий для конкурса
Создайте модели и контроллеры для призов и заданий.
Свяжите их с моделью конкурса.
Этап 5: Розыгрыш призов
5.1 Автоматизированная публикация поста с итогами конкурса
Создайте команду Artisan для автоматической публикации поста с итогами конкурса в заданное время.
5.2 Логика выбора победителей и отправка призов
Реализуйте логику выбора победителей в ContestController.
Используйте VK API для отправки призов, включая анимированный голд пак в VK.
Этап 6: Создание интерфейса
6.1 Создание страниц с интерфейсом
Разработайте представления с использованием HTML, CSS и JavaScript для управления пабликами и конкурсами.
6.2 Добавление форм для создания конкурсов
Интегрируйте формы создания конкурсов с выбором параметров в соответствующие представления.
После выполнения этих этапов у вас должно получиться функциональное веб-приложение на Laravel для управления конкурсами и пабликами с автоматизированным розыгрышем призов.